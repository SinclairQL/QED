                                QED Version 2
                                =============


    This textfile describes the changes introduced in QED v2, compared
    to v1.01.

    v2.03b released 02 July 2021
    ============================

    - On systems using a character height other than 10 pixels (e.g. NTSC TV
      mode), scrolling is now correctly adjusted.


    v2.03a released 28 May 2021
    ===========================

    - This is a quick fix for (Super)GoldCard users using SMSQ/E with French or
      Spanish keyboard layout. On these systems, the key right to the 'P' key
      is a 'dead' key used to compose accented characters. However, when this
      key is pressed it also generates an ASCII NUL character by itself.
      Since QED v2 allows you to enter control codes into the text (using the
      CTRL key), using the 'compose' key to type accented characters would
      also insert a NUL character before the one you wanted.
      This fix will now cause a NUL character to be ignored but other control
      codes are still accepted as before (except TAB, ENTER and ESC).
      Note that this functionality may change in future versions as the CTRL
      key is rather needed to implement more single-key commands, e.g. for
      cut-copy-paste (yes, I know CTRL-C is already used for job switching so
      maybe CTRL-K would do, or perhaps POKEing SV.CQCH?).
      

    v2.03 released 26 May 2021
    ==========================

    New features
    ------------

    - When QED's window was configured larger than the resolution of the
      current environment's screen, QED refused to start and gave an 'out of
      range' error. This has been changed so that QED now opens a window with
      default size which will always fit into a 512x256 screen. You may use the
      QEDCONFIG_BAS program to reconfigure QED's window to a suitable size.

    - QEDCONFIG_BAS allows you to copy the settings from an older copy of QED
      to a new one. Just enter the name of the old copy (e.g. QED_OLD if you
      have renamed your old copy from QED to QED_OLD). When you have finished,
      enter the name of the new copy to write the settings to or just ENTER to
      save them to the same copy. Note that you can only copy the settings from
      QED versions 2.00 and above.

    - When a file is read in containing lines longer than the set right margin
      (or 255 when Word Wrap is turned off), the lines will now be soft split 
      at the last space or tab character (i.e. word wrapped). If you change the
      right margin or wordwrap status and want the text to be reformatted, you
      can now do so by using the new RF command. This will NOT change the text
      by itself, so paragraphs will remain intact until you edit them.

    - The following options may be specified on the command line or as argument
      for the R or RC command when reading a file. Note that these options must
      be separated from the filename by spaces, so when using them in a R or RC
      command you MUST enclose the entire argument with a separator character.
      E.g. 'RC/example_txt -W+/', not 'RC example_txt -W+'
      - -Bn   : Set workspace buffer to n Kbytes
      - -C    : Read file in Cooked mode (strip CR, compress or expand TABs)
      - -E+/E-: Expand TABs in Cooked mode or not
      - -In   : Set TAB increment to n (was -T in earlier versions)
      - -On   : Set workspace Overhead to n Kbytes
      - -T+/T-: Compress TABs in Cooked mode or not
      - -W+/W-: Wordwrap on or off

    Bug fixes
    ---------

    - When a file was read in using the RC (Read Cooked) command, QED failed to
      close it after reading so it was impossible to save back.

    - The SL, SR and ST commands (Set Left Margin, Right Margin and Tab 
      distance respectively) now only accept values 255 or less, and the right
      margin must be greater than the left margin.

    - QED can now handle files larger than 1 MB without garbling them. Present
      versions however still have a limit of 32767 lines per file.

    - Fixed a bug where splitting a line (e.g. using ENTER) and then pressing 
      ESC caused the second part of the line to be lost.

    - Fixed a bug where splitting a line whilst the display was panned caused
      the second part of the line to be displayed twice on two rows.

    - When a workspace size was specified in the welcome screen, the optional
      'K' for 'kilobytes' was ignored, hence no more than 32767 bytes could be
      allocated. You can now specify up to 32767K again.

    - Specifying a workspace size with the -B option had no effect when reading
      an existing file. When you specify an explicit workspace size now using
      -B<KB>, it will be allocated regardless of the length of the file. When
      omitted, a workspace size of file length plus overhead will be allocated
      as usual.

    Known Issues
    ------------

    - Reading a file in cooked mode and with TAB expansion on (and TAB
      compression off) may result in a 'File too large' error message.
      This is because TABs are expanded into spaces, after which the file may
      no longer fit into the workspace (calculated by taking the length of the
      original file plus overhead).
      Workaround: Specify a workspace overhead large enough to contain the file
      after TAB expansion. You may either use the RC command with no argument
      after which you can specify the file name and workspace size, or with an
      argument containing the -o option, e.g. RC/example_txt -o50/ (note that
      slashes are required since the argument contains a space).
      Alternatively, you may load the file from S*BASIC using a command like 
      EX QED;'example_txt -c -o50'.


    v2.02 released 03 October 2018
    ==============================

    New features
    ------------

    - The RC command can now be used to load a file in cooked mode. It is
      equivalent to the R command, except that CR/LF line endings are converted
      to LF and TABS compressed or expanded according to the TAB compression
      and expansion settings.
      Note that both R and RC commands currently do not accept a filename
      containing spaces as parameter. These files can be loaded by using the R
      or RC command without a parameter and then entering the file name at the
      'File Name:' prompt.

    - Help file didn't mention the F6 key (toggle Auto Indent), F7 key (toggle
      Word Wrap), F9 key (toggle TAB expansion), and F10 key (toggle TAB
      compression). Their status is now shown in the status line.

    - The manual has (at last!) been updated for version 2.

    Bug fixes
    ---------

    - Using the R command without a file name caused QED to crash with an
      invalid file name. It now asks for the file name as expected.

    - After using the QF or XF command, the status line was garbled.

    Known issues
    ------------

    Options specified on the command line along with file names currently don't
    take effect.


    v2.01 released 25 September 2018
    ================================

    New Features
    ------------

    - Multi-file editing is now possible. This can be done by
      specifying multiple filenames on the commandline, e.g.:

      EX QED;'fred_c jim_asm peter_pas'

      which will load the files fred_c, jim_asm and peter_pas into
      QED. One file will be displayed at a time (in this case the
      first file specified on the commandline). Pressing F5 will
      switch the display to the next file in a circular fashion, like
      the CTRL-C key does when switching jobs. Note that if only one
      file is being edited, the F5 key behaves as in v1.01 (i.e. it
      updates the display).
      There is no limit on the number of files QED can handle, other
      than the restrictions imposed by the amount of available
      memory.

      The multi-file editing capability alters the functionality of
      some commands in QED:
      - The "Q" command, used to quit QED, scans the list of files
        being edited to see if changes have been made to the text.
        If so, you will be prompted if you want to lose the changes.
        Pressing Y will lose the changes in the current file,
        pressing N will abort the command leaving the displayed file
        active.

      - The "R" command will no longer discard the current file.
        Instead, the specified file will be loaded and displayed
        while the current file will remain active. Thus, each time
        you do a "R" command a new file will be added to the list of
        files being edited.
        The string parameter of the "R" command may be the name of
        the new file and possible commandline options. An empty
        parameter is allowed, in which case QED will prompt you to
        enter it (along with the workspace required).

      - The "X" command now saves ALL files being edited which have
        been modified within QED. Files not modified will NOT be
        saved. After all files have been saved successfully, an exit
        is made from QED.

      - Individual files may be quit (no save) using the QF command
        and saved using the XF command. When completed, these
        commands will display the next file being edited or quit QED
        if there are no active files left.


    - QED now supports AutoIndent. This is an useful feature for
      programmers in languages such as C, Assembly and Pascal which
      use indented text for clarity.
      When AutoIndent mode is on and you reach a new line due to
      pressing ENTER or wordwrapping, QED will note the column
      position of the first non-blank character on the previous line 
      (or the line before the previous if that line is blank, and so 
      on). The cursor on the new line will then be put on that column
      position, so that you won't have to TAB to it for each line.
      If you need to TAB back to the previous tab stop, e.g. when
      reaching the end of a { }-construction in C, you can now use
      SHIFT-TAB to move the cursor left to the previous tab stop.
      AutoIndent can be toggled on and off by pressing the SHIFT-F1
      (or F6) key or issuing the TA command.

    - QED now can handle files containing TAB characters. This is
      configurable through two settings: the "Expand TABs" option and
      the "Compress TABs" option.
      The "Expand TABs" option controls the handling of TAB
      characters in the display. When OFF, TABs will not be expanded
      and thus will look like funny characters in the file (as they
      did in v1.01). When ON, TABs will be displayed as one or more
      space characters as you would expect when using the TAB key.
      This will involve a small speed penalty however, so if you
      never use files containing TABs you may disable TAB-expansion
      to get full speed.
      The "Compress TABs" option controls the physical storage of 
      TABs in the file. When OFF, no TABs will be output (as in
      v1.01). When ON, QED will replace occurrences of one or more
      space characters in a line by TAB characters where appropriate.
      In programming source files, this will often reduce the file
      size considerably.
      It should be noted that QED will only compress TABs in _edited_
      lines, not the lines of the file which were not altered during
      an edit session! This can be overcome by loading a file in
      "Cooked" mode - see the manual.
      The "Expand TABs" option can be toggled using the TE command; 
      the "Compress TABs" option can be toggled using the TC command.

    - The Toolkit II default data directory is now supported when
      processing filenames.

    - When saving a file using the SA or X command, any existing file
      is now renamed to <filename>_OLD when the new version is
      written.

    - When Writing a Block to an existing file, a prompt is displayed
      to either overwrite or append to this file.

    - Both the command input (F3 or SHIFT-F3) and the filename and
      workspace prompts can now be aborted by pressing the arrow-up
      or -down key (On systems equipped with the Minerva ROM, the ESC
      key can also be used).

    - A space may now be used as separator character when entering
      commands requiring a string parameter, if the string itself
      does not contain spaces. E.g. "F wombat" attempts to find the
      string "wombat".
      The old syntax (using a non-alphanumeric separator) is still
      allowed, so it's still possible to have strings with spaces or
      reserved characters (brackets and semicolon) in it.

    - The "Shift-Space" key combination now gives a "normal" space.


    Bug fixes
    ---------

    - When joining two lines resulted in a line longer than 254
      characters, QED locked up. This has been fixed now.

    - Deleting the entire file using a DB command resulted in a
      crash. Fixed now.

